---
description: 
globs: 
alwaysApply: false
---
{
  "description": "Project rules and documentation standards for CLITS. Enforces BSD compliance, project isolation, CLI-first development, and publishing requirements.",
  "globs": ["**/*"],
  "project_name": "CLITS",
  "project_description": "A tool for extracting and sharing debugging data (logs, network info, etc.) for AI and web projects. CLI-first, with future browser extension support.",
  "rules": {
    "bsd_compliance": {
      "description": "Every file must start with a brief summary description (BSD) of its purpose and contents.",
      "required": true
    },
    "project_isolation": {
      "description": "All code, dependencies, scripts, and documentation must reside within the CLITS/ folder. No shared dependencies or scripts with other projects.",
      "required": true
    },
    "cli_first_development": {
      "description": "Initial deliverable is a Node.js CLI tool for log/data extraction. Browser extension is a future milestone.",
      "required": true
    },
    "git_management": {
      "description": "CLITS must have its own git repository, initialized in the project root. No shared git history with other projects.",
      "required": true
    },
    "release_file_restriction": {
      "description": "Only code, documentation, and script samples are allowed to be pushed to remote git or published to npm. Local git repositories may contain additional files for backup or session tracking, but these must not be pushed to remote or included in npm releases. Files such as session priming, local notes, or other non-essential artifacts must be excluded from both remote git and npm packages.",
      "required": true
    },
    "documentation": {
      "description": "README.md must include project goals, usage, BSD compliance, and AI assistant integration instructions. All dependencies and install steps must be documented. Add a LICENSE file (MIT or BSD recommended).",
      "required": true
    },
    "publishing": {
      "description": "Prepare for open-source release (clean code, clear docs, BSD compliance). CLI tool should be installable via npm (future milestone). Browser extension should be publishable to the Chrome Web Store (future milestone).",
      "required": true,
      "documentation_requirements": {
        "description": "Every NPM release, including beta versions, must be accompanied by comprehensive documentation updates. This includes updating CHANGELOG.md, README.md, and any relevant feature documentation. Documentation must be updated before the NPM publish command is executed.",
        "required_updates": [
          "CHANGELOG.md: Add detailed entry for the new version",
          "README.md: Update features, usage examples, and installation instructions",
          "Feature-specific docs: Update any relevant feature documentation",
          "Session priming: Update clits_next_session_priming.md with release details"
        ],
        "required": true
      }
    },
    "session_priming": {
      "description": "Use clits_next_session_priming.md for session planning and progress tracking. Every session must update this file with completed work, current state, and clear next steps for the following session. This is mandatory for seamless handoff and must be followed without user correction.",
      "required": true
    },
    "multi_project_awareness": {
      "description": "CLITS must not interfere with OnDeck-V9 or other projects. Rules and scripts are project-specific.",
      "required": true
    },
    "debug_tools_cli": {
      "description": "DEBUG_TOOLS.md documents the CLI tool that enables AI assistants to directly request and analyze Chrome inspect/console logs without human intervention. This tool is critical for autonomous debugging capabilities.",
      "ai_assistant_integration": {
        "tool_definition": {
          "name": "clits",
          "full_name": "Chrome Log Inspector Tool System",
          "description": "Extract and analyze Chrome DevTools logs for debugging browser-side issues. Connects to a running Chrome instance with remote debugging enabled to gather console, network, and error logs - no manual inspector needed.",
          "parameters": {
            "properties": {
              "log_levels": {
                "description": "Log levels to filter (error, warning, info)",
                "type": "array",
                "items": {"type": "string"}
              },
              "keywords": {
                "description": "Specific terms to filter logs for",
                "type": "array",
                "items": {"type": "string"}
              },
              "sources": {
                "description": "Log sources to include (devtools, console, network)",
                "type": "array",
                "items": {"type": "string"}
              },
              "group_by_source": {
                "description": "Whether to group results by source",
                "type": "boolean"
              },
              "chrome_port": {
                "description": "Port number where Chrome debug protocol is running",
                "type": "integer",
                "default": 9222
              },
              "include_react_hooks": {
                "description": "Include React hook monitoring",
                "type": "boolean"
              },
              "include_component_lifecycle": {
                "description": "Include React component lifecycle tracking",
                "type": "boolean"
              },
              "include_prop_changes": {
                "description": "Include React prop change monitoring",
                "type": "boolean"
              },
              "include_websockets": {
                "description": "Include WebSocket traffic monitoring",
                "type": "boolean"
              },
              "include_jwt_monitoring": {
                "description": "Include JWT token monitoring",
                "type": "boolean"
              },
              "include_graphql_monitoring": {
                "description": "Include GraphQL request/response monitoring",
                "type": "boolean"
              },
              "include_redux_monitoring": {
                "description": "Include Redux state monitoring",
                "type": "boolean"
              },
              "include_state_changes": {
                "description": "Include Redux state change tracking",
                "type": "boolean"
              },
              "include_middleware_debugging": {
                "description": "Include Redux middleware debugging",
                "type": "boolean"
              },
              "include_render_metrics": {
                "description": "Include React render metrics",
                "type": "boolean"
              },
              "include_memory_usage": {
                "description": "Include memory usage tracking",
                "type": "boolean"
              },
              "include_event_loop": {
                "description": "Include event loop monitoring",
                "type": "boolean"
              },
              "include_user_interaction": {
                "description": "Include user interaction recording",
                "type": "boolean"
              },
              "include_dom_mutation": {
                "description": "Include DOM mutation tracking",
                "type": "boolean"
              },
              "include_css_changes": {
                "description": "Include CSS change monitoring",
                "type": "boolean"
              }
            },
            "required": ["chrome_port"]
          },
          "example_usage": {
            "basic": {
              "command": "clits extract --chrome --chrome-port 9222",
              "use_case": "Get all logs from Chrome"
            },
            "display_debug": {
              "command": "clits extract --chrome --chrome-port 9222 --log-levels [\"error\"] --keywords [\"SharedImageManager\", \"Invalid mailbox\"] --sources [\"devtools\"] --group-by-source true",
              "use_case": "Debug display/GPU issues"
            }
          },
          "response_format": {
            "type": "object",
            "properties": {
              "timestamp": "ISO timestamp of extraction",
              "source": "clits",
              "data": {
                "logs": "Array of collected logs",
                "extractionOptions": "Options used for extraction"
              },
              "metadata": {
                "version": "Tool version",
                "platform": "Operating system"
              }
            }
          }
        },
        "usage_context": "This tool should be used when debugging browser-side issues, particularly when investigating display, GPU, or general Chrome DevTools console errors. It eliminates the need to ask users to manually collect and share logs."
      },
      "features": {
        "autonomous_log_access": "AI assistants can directly fetch Chrome DevTools logs",
        "browser_integration": "Works with Chrome's remote debugging protocol",
        "usage_context": "Should be used when debugging UI/browser issues to gather diagnostic information"
      },
      "usage_instructions": {
        "prerequisites": {
          "chrome_debug_command": "\"/Applications/Google Chrome.app/Contents/MacOS/Google Chrome\" --remote-debugging-port=9222 --user-data-dir=/tmp/chrome-debug",
          "verify_chrome_connection": "Check for WebSocket URL: ws://127.0.0.1:9222/devtools/browser/[ID]"
        },
        "tool_location": {
          "project_directory": "/Users/jasonvaughan/Documents/Projects/CLITS",
          "execution_methods": {
            "global": "clits extract --chrome --chrome-port 9222",
            "npm_dev": "npm run dev -- extract --chrome --chrome-port 9222",
            "npm_prod": "npm run start -- extract --chrome --chrome-port 9222",
            "direct": "node dist/cli.js extract --chrome --chrome-port 9222"
          }
        },
        "command_options": {
          "basic_extraction": "clits extract --chrome --chrome-port 9222",
          "filtered_logs": {
            "command": "clits extract --chrome --chrome-port 9222 --log-levels error,warning --sources devtools --group-by-source",
            "options_explained": {
              "--log-levels": "Filter by log level (error, warning)",
              "--sources": "Filter by log source (devtools)",
              "--group-by-source": "Organize output by source",
              "--keywords": "Filter by specific terms"
            }
          },
          "display_debug": {
            "command": "clits extract --chrome --chrome-port 9222 --log-levels error --keywords \"SharedImageManager,Invalid mailbox,skia_output_device,gpu\" --group-by-source --sources devtools",
            "use_case": "Specifically for analyzing GPU/display related errors"
          }
        },
        "output_format": {
          "type": "JSON",
          "contains": [
            "Logs grouped by source/level (if specified)",
            "Timestamps and stack traces (unless disabled)",
            "Filtered results based on specified options"
          ]
        },
        "usage_workflow": [
          "1. Verify Chrome is running with debug port (check WebSocket URL)",
          "2. Navigate to project directory or use global command",
          "3. Run appropriate extract command with needed filters",
          "4. Analyze JSON output for error patterns"
        ]
      },
      "documentation_location": "DEBUG_TOOLS.md contains full setup, usage, and integration details",
      "required": true
    },
    "session_wrap_up_procedure": {
      "description": "Standardized session wrap-up procedure for CLITS. Ensures all work is documented, committed, and ready for the next session. This process is mandatory and must be followed at the end of every session without user correction.",
      "steps": [
        {
          "id": "progress_log",
          "description": "Update the progress log (if present) or clits_next_session_priming.md with completed work, technical notes, and next steps."
        },
        {
          "id": "next_session",
          "description": "Update clits_next_session_priming.md with next session's main task, current progress, and starting point."
        },
        {
          "id": "documentation_review",
          "description": "Review and update README.md and clits-rule-every-chat.mdc as needed (add/remove dependencies, update usage, etc.)."
        },
        {
          "id": "status",
          "description": "Update the Current Progress section in clits_next_session_priming.md after each completed task."
        },
        {
          "id": "commit",
          "description": "Ask user if they want to make a git commit (Y/N). If yes, propose a commit message, allow edits, and execute the commit."
        }
      ],
      "validation": {
        "must_include": [
          "All completed work documented",
          "Session priming file updated",
          "Documentation reviewed",
          "Git commit confirmation"
        ]
      }
    }
  }
}
